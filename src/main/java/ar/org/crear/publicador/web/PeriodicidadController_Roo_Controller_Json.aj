// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.org.crear.publicador.web;

import ar.org.crear.publicador.common.model.Periodicidad;
import ar.org.crear.publicador.web.PeriodicidadController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect PeriodicidadController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PeriodicidadController.showJson(@PathVariable("id") Long id) {
        Periodicidad periodicidad = periodicidadService.findPeriodicidad(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (periodicidad == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(periodicidad.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PeriodicidadController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Periodicidad> result = periodicidadService.findAllPeriodicidads();
        return new ResponseEntity<String>(Periodicidad.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PeriodicidadController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Periodicidad periodicidad = Periodicidad.fromJsonToPeriodicidad(json);
        periodicidadService.savePeriodicidad(periodicidad);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+periodicidad.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PeriodicidadController.createFromJsonArray(@RequestBody String json) {
        for (Periodicidad periodicidad: Periodicidad.fromJsonArrayToPeriodicidads(json)) {
            periodicidadService.savePeriodicidad(periodicidad);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PeriodicidadController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Periodicidad periodicidad = Periodicidad.fromJsonToPeriodicidad(json);
        periodicidad.setId(id);
        if (periodicidadService.updatePeriodicidad(periodicidad) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> PeriodicidadController.deleteFromJson(@PathVariable("id") Long id) {
        Periodicidad periodicidad = periodicidadService.findPeriodicidad(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (periodicidad == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        periodicidadService.deletePeriodicidad(periodicidad);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
