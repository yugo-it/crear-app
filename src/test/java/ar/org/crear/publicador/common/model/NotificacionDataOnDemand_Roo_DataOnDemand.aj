// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.org.crear.publicador.common.model;

import ar.org.crear.publicador.common.model.Notificacion;
import ar.org.crear.publicador.common.model.NotificacionDataOnDemand;
import ar.org.crear.publicador.server.repository.NotificacionRepository;
import ar.org.crear.publicador.server.service.NotificacionService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect NotificacionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NotificacionDataOnDemand: @Component;
    
    private Random NotificacionDataOnDemand.rnd = new SecureRandom();
    
    private List<Notificacion> NotificacionDataOnDemand.data;
    
    @Autowired
    NotificacionService NotificacionDataOnDemand.notificacionService;
    
    @Autowired
    NotificacionRepository NotificacionDataOnDemand.notificacionRepository;
    
    public Notificacion NotificacionDataOnDemand.getNewTransientNotificacion(int index) {
        Notificacion obj = new Notificacion();
        setDescripcion(obj, index);
        setUtilizado(obj, index);
        return obj;
    }
    
    public void NotificacionDataOnDemand.setDescripcion(Notificacion obj, int index) {
        String descripcion = "descripcion_" + index;
        if (descripcion.length() > 500) {
            descripcion = descripcion.substring(0, 500);
        }
        obj.setDescripcion(descripcion);
    }
    
    public void NotificacionDataOnDemand.setUtilizado(Notificacion obj, int index) {
        Boolean utilizado = Boolean.TRUE;
        obj.setUtilizado(utilizado);
    }
    
    public Notificacion NotificacionDataOnDemand.getSpecificNotificacion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Notificacion obj = data.get(index);
        Long id = obj.getId();
        return notificacionService.findNotificacion(id);
    }
    
    public Notificacion NotificacionDataOnDemand.getRandomNotificacion() {
        init();
        Notificacion obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return notificacionService.findNotificacion(id);
    }
    
    public boolean NotificacionDataOnDemand.modifyNotificacion(Notificacion obj) {
        return false;
    }
    
    public void NotificacionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = notificacionService.findNotificacionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Notificacion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Notificacion>();
        for (int i = 0; i < 10; i++) {
            Notificacion obj = getNewTransientNotificacion(i);
            try {
                notificacionService.saveNotificacion(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            notificacionRepository.flush();
            data.add(obj);
        }
    }
    
}
